{"version":3,"sources":["components/Time.js","components/Forecast.js","components/Pressure.js","components/Weather.js","App.js","reportWebVitals.js","index.js"],"names":["Time","useState","Date","date","setDate","useEffect","timer","setInterval","clearInterval","toLocaleDateString","toLocaleTimeString","Forecast","props","Fragment","humidity","pressure","Weather","city","setCity","search","setSearch","loading","setLoading","sun","pro","hours","sys","getHours","minutes","getMinutes","str","a","url","fetch","response","json","resJson","fetchApi","then","className","type","onBlur","event","target","value","style","textAlign","marginTop","main","temp","temp_min","temp_max","fontSize","textTransform","fontWeight","weather","map","desc","description","class","Carousel","Item","interval","color","Pressure","wind","speed","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eec2e8ea.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nconst Time=()=>{\r\n    var [date,setDate] = useState(new Date());\r\n    \r\n    useEffect(() => {\r\n        var timer = setInterval(()=>setDate(new Date()), 1000 )\r\n        return function cleanup() {\r\n            clearInterval(timer)\r\n        }\r\n    \r\n    });\r\n    return(\r\n        <div> {date.toLocaleDateString()} | {date.toLocaleTimeString()} </div>\r\n    )\r\n}\r\nexport default Time;","import React from \"react\";\r\n\r\nconst Forecast = props => {\r\n  return (\r\n        <React.Fragment>\r\n            {props.humidity} %\r\n        </React.Fragment>\r\n    )\r\n}\r\nexport default Forecast;","import React, { useEffect, useState } from \"react\";\r\n\r\nconst Forecast = props => {\r\n  return (\r\n        <React.Fragment>\r\n            {props.pressure} hPa\r\n        </React.Fragment>\r\n    )\r\n}\r\nexport default Forecast;","import React, { useEffect, useState } from \"react\";\r\nimport \"./css/style.css\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Time from './Time.js';\r\nimport Forecast from './Forecast.js';\r\nimport Pressure from './Pressure.js';\r\nimport Carousel from 'react-bootstrap/Carousel';\r\n\r\nconst Weather = () => {\r\n\r\n    const [city, setCity] = useState(null);\r\n    const [search, setSearch] = useState(\"Delhi\");\r\n    const [loading, setLoading] = useState(false);\r\n    // const [tempo,settempo] = useState(null);\r\n    let res = \"\";\r\n    useEffect(() => {\r\n        const fetchApi = async () => {\r\n            const url = `http://api.openweathermap.org/data/2.5/weather?q=${search}&units=metric&appid=110f2b9ec97d037c60903a1418abba54`\r\n            const response = await fetch(url);\r\n            const resJson = await response.json();\r\n            res = response;\r\n            setCity(resJson);\r\n        };\r\n        \r\n        fetchApi().then(() => setLoading(true))\r\n    }, [search]);\r\n\r\n    function sun(pro) {\r\n        const hours = new Date(city.sys[pro] * 1000).getHours();\r\n        const minutes = new Date(city.sys[pro] * 1000).getMinutes();\r\n        let str = hours + \":\";\r\n\r\n        if (minutes < 10 && minutes > 0) {\r\n            str += \"0\" + minutes;\r\n        }\r\n        else if (minutes >= 10) {\r\n            str += minutes;\r\n        }\r\n        else {\r\n            str += \"00\";\r\n        }\r\n        return str;\r\n    }\r\n    function searchingHandler(event) {\r\n        setLoading(false);\r\n        setSearch(event.target.value);\r\n        res = \"\";\r\n    }\r\n    return (\r\n        // <div className=\"body\">\r\n        <div className=\"box\">\r\n            <div className=\"inputData\">\r\n                <input\r\n                    type=\"search\"\r\n                    className=\"inputField\"\r\n                    onBlur={searchingHandler}\r\n                >\r\n                </input>\r\n\r\n            </div>\r\n            <br></br>\r\n            <div className=\"time\" style={{ textAlign: \"center\", marginTop: \"4rem\" }}>\r\n                <Time />\r\n            </div>\r\n\r\n            <br></br>\r\n\r\n            {!city ? (\r\n                <p className=\"errorMsg\"> No Data Found </p>\r\n            ) : (\r\n                <div>\r\n                    <div>\r\n                        <h6 className=\"location\">\r\n                            {search}\r\n                        </h6>\r\n                        <h1 className=\"temp\">\r\n                            {(loading) && city.main.temp}°C\r\n                            </h1>\r\n                        <h3 className=\"tempmin_max\"> Min :{(loading === true) && city.main.temp_min}°C | Max :{(loading === true) && city.main.temp_max}°C</h3>\r\n                        <div>\r\n                            {/* <h2>{(loading) && city.weather.map((desc) => {\r\n                            return desc.main\r\n                        }) }</h2><br></br> */}\r\n                            <br></br>\r\n                            <h3 style={{ textAlign: \"center\", fontSize: \"34px\", textTransform: \"capitalize\", fontWeight: \"initial\" }}>{(loading) ? city.weather.map((desc) => {\r\n                                return desc.description\r\n                            }) : null} <i class=\"fab fa-skyatlas\"></i></h3>\r\n                            <br></br><br></br>\r\n\r\n                            <Carousel>\r\n                                <Carousel.Item interval={20000}>\r\n                                    <h2 style={{ textAlign: \"center\", fontSize: \"25px\", fontWeight: \"bold\" }}>Sunrise:  {(loading) ? sun('sunrise') : null}  <i class=\"fas fa-sun\" style={{ color: \"yellow\" }} ></i> </h2>\r\n                                    <h2 style={{ textAlign: \"center\", fontSize: \"25px\", fontWeight: \"bold\" }}> Sunset:  {(loading) ? sun('sunset') : null} <i class=\"fas fa-cloud-sun\"></i></h2>\r\n                                    <br></br><br></br>\r\n                                </Carousel.Item>\r\n                                <Carousel.Item interval={20000} >\r\n\r\n                                    <h2 style={{ textAlign: \"center\", fontSize: \"25px\", fontWeight: \"bold\" }}>Humidity <i class=\"fas fa-thermometer-half\" style={{ color: \"black\" }}></i></h2>\r\n                                    <h2 style={{ textAlign: \"center\", fontSize: \"25px\", fontWeight: \"bold\" }}> <Forecast humidity={city.main.humidity} /> </h2>\r\n                                    <br></br><br></br>\r\n\r\n                                </Carousel.Item>\r\n                                <Carousel.Item interval={20000}>\r\n                                    <h2 style={{ textAlign: \"center\", fontSize: \"25px\", fontWeight: \"bold\" }}>Pressure <i class=\"fab fa-cloudscale\"></i></h2>\r\n                                    <h2 style={{ textAlign: \"center\", fontSize: \"25px\", fontWeight: \"bold\" }}> <Pressure pressure={city.main.pressure} /> </h2>\r\n                                    <br></br><br></br>\r\n                                </Carousel.Item>\r\n                                <Carousel.Item interval={20000}>\r\n                                    <h2 style={{ textAlign: \"center\", fontSize: \"25px\", fontWeight: \"bold\" }}>Wind Speed <i class=\"fas fa-wind\"></i></h2>\r\n                                    <h2 style={{ textAlign: \"center\", fontSize: \"25px\", fontWeight: \"bold\" }}>{(loading) ? city.wind.speed : null} Km/h</h2>\r\n                                    <br></br><br></br>\r\n                                </Carousel.Item>\r\n\r\n                            </Carousel>\r\n                        </div>\r\n                        <br />\r\n                    </div>\r\n                    <div className=\"wave -one\"></div>\r\n                    <div className=\"wave -two\"></div>\r\n                    <div className=\"wave -three\"></div>\r\n\r\n                </div>\r\n            )}\r\n\r\n        </div>\r\n        // </div>\r\n\r\n    )\r\n}\r\nexport default Weather;","import React from \"react\";\r\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\r\nimport Weather from \"./components/Weather\";\r\n\r\nimport './App.css';\r\n//import Card from \"./Layout/Card\";\r\n//import Cardleft from \"./Layout/Cardleft\";\r\n\r\nfunction App() {\r\n  \r\n  return (\r\n    <div className=\"rowC\">\r\n      {/* <span><Cardleft/></span> */}\r\n    <span><Weather/></span> \r\n    {/* <span><Card /></span> */}\r\n     </div>\r\n   \r\n     );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}